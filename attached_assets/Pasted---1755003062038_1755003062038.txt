در ادامه فهرست کامل و ساختارمند سؤالات (هدف: آشکارسازی کامل منطق عملکردی و قیود دستیار). می‌توانی کل متن را برای دستیار ارسال کنی. برای پاسخ ایده‌آل فرمت‌های پیشنهادی (JSON / جدول) مشخص شده‌اند.

======== BEGIN MESSAGE TO REPLIT ASSISTANT ========

لطفاً به تمامی سؤالات زیر با دقت، بدون حدس، و در صورت عدم قطعیت با مقدار null + توضیح پاسخ بده. اگر می‌توانی خروجی را در قالب چند JSON تفکیک‌شده مطابق توضیحات هر بخش بده؛ در غیر این صورت یک JSON بزرگ شامل همه سکشن‌ها با کلیدهای ذکرشده. هر جا که امکان مثال diff هست، از unified diff استفاده کن.

SECTION 1: Core Detection & Heuristics 1.1 detection_pipeline: آرایه‌ای از مراحل {name, order, weight (0..1), timeout_ms, fallback_on_failure}.
1.2 آیا هر مرحله cache شده است؟ اگر بله، فیلد cache_scope (repo|branch|commit|file).
1.3 dependency_resolution_strategy: آیا از lockfile استفاده می‌کند؟ (pnpm-lock.yaml / package-lock.json / yarn.lock)
1.4 نحوه وزن‌دهی presence vs. semantic usage (مثلاً فقط وجود express در dependencies بدون import).
1.5 ambiguous_framework_resolution: اگر همزمان fastify و express باشند چه می‌شود؟

SECTION 2: Runtime & Instrumentation 2.1 آیا agent برای قابلیت refactor live نیاز به sourcemap دارد؟
2.2 sourcemap_required_for: ["stack-mapping","inline-edit","breakpoint-hint"]؟
2.3 سازوکار تشخیص crash loop (criteria: N restarts in T ms؟)
2.4 instrumentation_hooks: {fs, net, child_process, http} فعال هستند؟ هر کدام limited؟

SECTION 3: .replit Configuration Semantics 3.1 کلیدهایی که parse می‌کنید (لیست کامل).
3.2 validation_errors نمونه (اگر syntax غلط باشد، JSON خطا).
3.3 precedence: run در مقایسه با workflows.workflow.tasks[0].args
3.4 آیا می‌توانید نمونه AST تولیدشده از .replit را نشان دهید؟

SECTION 4: package.json Script Semantics 4.1 script_pattern_matchers (regexها).
4.2 minimum_required_scripts.
4.3 آیا chaining با && یا استفاده از concurrently تحلیل را تغییر می‌دهد؟
4.4 criteria برای تشخیص "monolithic dev script" و downgrade.

SECTION 5: File & Directory Structure 5.1 file_role_inference: قانون نگاشت نام فایل → نقش (مثال index.ts → "backend_entry").
5.2 چگونه fallback می‌دهد اگر index.html نیست (به public/ یا root/).
5.3 treatment برای فولدرهای test/, tests.

SECTION 6: Build & Bundling 6.1 آیا agent size واقعی bundle را استخراج می‌کند یا تخمینی؟
6.2 اگر esbuild + vite هردو هستند، کدام precedence دارد؟
6.3 build_graph_analysis: depth limit؟

SECTION 7: Framework-Specific Signals 7.1 express_signals: imports, app.listen, middleware usage.
7.2 react_signals: presence of jsx/tsx + react-dom createRoot.
7.3 drizzle_signals: import from drizzle-orm + config file?
7.4 conflict_resolution اگر هر دو ORM (drizzle + prisma).

SECTION 8: Performance & Size Constraints 8.1 memory_budget_mb برای تحلیل.
8.2 max_files_indexed.
8.3 early_abort_conditions (e.g., repo > X MB).

SECTION 9: AI Feature Gating 9.1 feature_matrix: {feature: required_signals[], blockers[], degrade_on}.
9.2 refactor_preconditions.
9.3 test_generation_requirements (jest/vitest detection logic).

SECTION 10: Dynamic Imports & Plugin Resolution 10.1 آیا dynamic import در vite.config.ts partially parsed یا skip؟
10.2 plugin_execution_order_significance؟
10.3 safe_list_plugins و block_list_plugins؟

SECTION 11: Environment & Ports 11.1 port_detection_order (PORT env, default 3000/5000, scan?).
11.2 multiple_port_conflict_strategy.
11.3 اگر process.env.PORT استفاده نشود ولی listen روی عدد ثابت باشد؟

SECTION 12: Workflows & Multi-Step Tasks 12.1 workflows.workflow schema formal.
12.2 dependency_relation: task = "workflow.run" resolution algorithm.
12.3 waitForPort timeout default.
12.4 parallel mode resource limits.

SECTION 13: Hidden / Indexing 13.1 hidden effect: فقط UI یا indexing هم؟
13.2 ignore_globs داخلی.
13.3 reindex_trigger_conditions.

SECTION 14: Multi-Process vs Single-Process 14.1 runtime_process_model detection (n processes).
14.2 inter-process signaling heuristic (ports scan?).
14.3 تاثیر داشتن dev script بدون کلمه vite.

SECTION 15: Logging & Noise 15.1 log suppression heuristics (threshold lines/sec).
15.2 آیا الگوهای "SHERLOCK" بنر را فیلتر می‌کند؟
15.3 max_log_line_length پیش از truncate.

SECTION 16: Security & Session 16.1 آیا presence express-session وزن منفی/مثبت دارد؟
16.2 detection of potential csrf middleware؟
16.3 session store نوع (memory vs pg) اثر؟

SECTION 17: Database & Schema 17.1 schema_introspection: فعال است؟
17.2 migration_tool_detection (drizzle-kit, prisma, knex).
17.3 cross_file_relation_mapping انجام می‌دهید؟

SECTION 18: Caching & Persistence 18.1 cache_layers: in-memory, persisted?
18.2 invalidation_on_file_change granularity.
18.3 warmup_strategy بعد از cold start.

SECTION 19: Error Handling & Crash Resilience 19.1 detection of process.on('uncaughtException').
19.2 آیا وجود آن instrumentation را محدود می‌کند؟
19.3 graceful_shutdown_signals لیست.

SECTION 20: Agent State / Versioning 20.1 internal_version string?
20.2 backward_compat_flags.
20.3 feature_flag_examples.

SECTION 21: Minimal Patch & Verification Loop 21.1 endpoint یا مکانیزم trigger re-analysis؟
21.2 cooldown_between_reanalyses_ms.
21.3 recommended minimal patch template.

SECTION 22: Toolchain & Dev Dependencies 22.1 dev_dep_weighting (ignored|partial|full).
22.2 conflict_detection مثال (eslint vs biome).
22.3 watch_mode_detection (nodemon/tsx --watch).

SECTION 23: Version Drift & Future-Proofing 23.1 semver_range_tolerance.
23.2 unsupported_version_examples.
23.3 suggestion_engine_version_alignment.

SECTION 24: Fallback Scenarios & Failure Modes 24.1 failure_modes array: {code, description, user_visible, auto_recover}.
24.2 silent_failure_conditions.
24.3 mitigation_strategies.

SECTION 25: Canonical Examples & Diffs 25.1 Provide canonical minimal Express+React+Vite+TS (file tree + key file contents brief).
25.2 diff_between_canonical_and_our_repo (symbolic if large).
25.3 improvement_opportunities_ranked.

SECTION 26: Confidence Scoring & Telemetry 26.1 formula overview برای overall confidence.
26.2 weighting collisions resolution.
26.3 telemetry fields collected (anonymized).

SECTION 27: JSON Output Contract 27.1 لطفاً ساختار خروجی کلی را در قالب: { "sections": { "1": {...}, "2": {...}, ... }, "meta": { "schema": "deep-diagnostics-v1", "generatedAt": "ISO-8601", "limitations": "...", "nullPolicy": "fields null => unknown/not-validated" } }

اگر بخشی را نمی‌توانی پاسخ دهی، آن کلید را با {"unsupported": true, "explanation": "..."} برگردان.

مهم:

هیچ متن خارج از JSON و بخش‌های درخواست‌شده.
برای diff ها اگر طولانی است placeholder قرار بده و فقط ساختار patch را نشان بده.
======== END MESSAGE TO REPLIT ASSISTANT ========